func primeTest(bool. primes, int n) with(
    int(result, i, p),
    bool(boolBuffer, boolBuffer2)
){
    n = 100000
    while i < n{
        primes.i = true
        i = i + 1
    }
    p = 2
    while p < n{
        result = p * p
        if primes.p{
            while result < n && result > 0{
                primes.result = false
                result = result + p
            }
        }
        p = p + 1
    }
}
func fibRekuTest(int n) with(
    int(leftResult, rightResult, leftArg, rightArg)
){
    if n < 2{
        RETURN(n)
    }else{
        rightResult = fibRekuTest(n-1)
        leftResult = fibRekuTest(n - 2)
        RETURN(leftResult + rightResult)
    }
}

func main with(
    int(n, result, counter, fibRes, k),
    bool.100000(primes)
){
    n = 100000
    primeTest(primes, n)
    result = 0
    counter = 0
    while counter < n{
        if primes.counter{
            result = result  + 1
        }
        counter = counter + 1
    }
    k = 30
    fibRes = fibRekuTest(k)
    PRINT(fibRes)
    PRINT(result)
}