func primeTest(bool. primes, int n) with(
    int(result, i, p),
    bool(boolBuffer, boolBuffer2)
){
    n = 100000
    for i from 0 to n{
        primes.i = true
    }
    for p from 2 to n{
        result = p * p
        if primes.p{
            while result < n && result > 0{
                primes.result = false
                result = result + p
            }
        }
    }
}

func printCharArr with(
    byte.10(b),
    byte(space, rect, buffer, linefeed)
){
    space = b_32
    rect = b_91
    linefeed = b_10

    for i from 0 to 10{
        if i%2 == 0{
            b.i = space
        }else{
            b.i = rect
        }
    }
    for i from 0 to 10{
    buffer = b.i
        PRINT(buffer)
    }
    PRINT(linefeed)
}

func fibRekuTest(int n) with(
    int(leftResult, rightResult)
){
    if n < 2{
        return n
    }else{
        rightResult = fibRekuTest(n - 1)
        leftResult = fibRekuTest(n - 2)
        return leftResult + rightResult
    }
}

func main with(
    int(n, result),
    bool.100000(primes)
){
    n = 100000

    printCharArr()
    primeTest(primes, n)
    result = 0
    for i from 0 to n{
        if primes.i{
            result = result + 1
        }
    }
    n = 6
    PRINT(fibRekuTest(fibRekuTest(n)))
    PRINT(result)
}