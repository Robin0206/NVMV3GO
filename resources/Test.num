
func countNeighbors(bool. input, int index, int length) with(
    int(neighbors),
    bool(buffer)
){
    neighbors = 0
    for i from 0-3 to 3{
        buffer = input.i
        if buffer == true{
            neighbors = neighbors + 1
        }
    }
    return neighbors
}

func arrCopy(bool. src, bool. dst, int length) with(
    bool(buffer)
){
    for i from 0 to length{
        buffer = src.i
        dst.i = buffer
    }
}

func printArr(bool. grid, int length) with(
    byte(space, x, linefeed),
    bool(buffer),
    int(num)
){
    rect = b_78
    space = b_32
    linefeed = b_10
    num = 10
    for i from 0 to length{
        buffer = grid.i
        if buffer{
            PRINT(rect)
        }
    }

    PRINT(linefeed)
}

func wolfram with(
    bool.100(grid, next),
    int(n, neighbors, row, rows)
){
    rows = 20
    n = 100
    fillRandom(grid, n)
    row = 0
    while row < rows{
        for i from 0 to n{
            neighbors = countNeighbors(grid, i, n)
            if neighbors == 2 || neighbors == 4{
                next.i = true
            }else{
                next.i = false
            }
        }
        printArr(grid, n)
        arrCopy(next, grid, n)
        row = row + 1
    }
}


func primeTest(bool. primes, int n) with(
    int(result, i, p),
    bool(boolBuffer, boolBuffer2)
){
    n = 100000
    for i from 0 to n{
        primes.i = true
    }
    for p from 2 to n{
        result = p * p
        if primes.p{
            while result < n && result > 0{
                primes.result = false
                result = result + p
            }
        }
    }
}

func fibRekuTest(int n) with(
    int(leftResult, rightResult)
){
    if n < 2{
        return n
    }else{
        rightResult = fibRekuTest(n - 1)
        leftResult = fibRekuTest(n - 2)
        return leftResult + rightResult
    }
}

func fillRandom(bool. input, int length){
    for i from 0 to length{
        RAND(input, i)
    }
}

func main with(
    int(n, result),
    bool.100000(primes)
){
    n = 100000
    wolfram()
    primeTest(primes, n)
    result = 0
    for i from 0 to n{
        if primes.i{
            result = result + 1
        }
    }
    n = 6
    PRINT(fibRekuTest(fibRekuTest(n)))
    PRINT(result)
}