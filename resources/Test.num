func primeTest with(
    bool.100000(primes),
    int(result, i, p, n),
    bool(boolBuffer, boolBuffer2)
){
    n = 100000
    while i < n{
        primes.i = true
        i = i + 1
    }
    p = 2
    while p < n{
        result = p * p
        if primes.p{
            while result < n && result > 0{
                primes.result = false
                result = result + p
            }
        }
        p = p + 1
    }
    result = 0
    i = 0
    while i < n{
        if primes.i{
            result = result + 1
        }
        i = i + 1
    }
    PRINT(result + 1 - 1)
}
func simpleRekuTest(int n){
    if n > 0{
        PRINT(n)
        PARG(n - 1)
        CALL(simpleRekuTest)
    }
}
func fibRekuTest(int n) with(
    int(leftResult, rightResult, leftArg, rightArg)
){
    if n < 2{
        RETURN(n)
    }else{
        leftArg = n - 1
        PARG(leftArg)
        CALL(fibRekuTest)
        RETG(leftResult)
        rightArg = n - 2
        PARG(rightArg)
        CALL(fibRekuTest)
        RETG(rightResult)
        RETURN(leftResult + rightResult)
    }
}

func main with(
    int(n)
){
    n = 30
    PARG(n)
    CALL(fibRekuTest)
    RETG(n)
    PRINT(n)
}